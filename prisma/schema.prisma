generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// BASE SCHEMA

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  Int
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  username        String            @unique
  password        String
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  UserGroup       UserGroup[]
  Subscription    Subscription[]
  Superuser       Superuser[]
  Stock_Watchlist Stock_Watchlist[]
  User_Settings   User_Settings[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ADDED SCHEMA - ADD NEW TABLES BELOW HERE ONWARDS

model UserGroup {
  id        String  @id @default(cuid())
  user_type String?
  user_id   String
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Stock {
  stockID      Int    @id @default(autoincrement())
  tickerSymbol String @unique
  companyName  String @unique
  exchange     String

  historicalStockPrice Historical_Stock_Price[]
  MLStockPrice         ML_Stock_Price[]
}

model Historical_Stock_Price {
  stockID    Int
  Date       DateTime
  DateString String
  Open       Float
  High       Float
  Low        Float
  Close      Float
  Volume     Int

  stock Stock @relation(fields: [stockID], references: [stockID], onDelete: Cascade)
  @@id([stockID, Date])
}

model ML_Stock_Price {
  stockID    Int
  Date       DateTime
  DateString String
  Price      Float
  MLModelID  Int

  stock Stock @relation(fields: [stockID], references: [stockID], onDelete: Cascade)
  @@id([stockID, Date, MLModelID])
}

model ML_types {
  modelID   Int    @id @default(autoincrement())
  modelType String
}

model Superuser {
  superuserID Int    @id @default(autoincrement())
  userID      String @unique

  User User? @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Subscription_Plan {
  subscriptionPlanID  Int            @id @default(autoincrement())
  planName            String         @unique
  price               Int
  watchlistLimit      Int
  Subscription        Subscription[]
}

model Subscription {
  subscriptionID     Int    @id @default(autoincrement())
  userID             String @unique
  subscriptionPlanID Int

  Subscription_Plan Subscription_Plan? @relation(fields: [subscriptionPlanID], references: [subscriptionPlanID], onDelete: Cascade)
  User              User?              @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model App_Settings {
  settingID    Int    @id @default(autoincrement())
  settingName  String @unique
  settingValue String
}

model User_Settings {
  settingID    Int    @id @default(autoincrement())
  userID       String
  settingName  String 
  settingValue String

  User User? @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Stock_Watchlist {
  watchlistID Int    @id @default(autoincrement())
  userID      String
  stockID     Int

  User User? @relation(fields: [userID], references: [id], onDelete: Cascade)
}
